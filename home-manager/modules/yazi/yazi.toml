# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

# =====================================
# MANAGER CONFIGURATION
# =====================================
[mgr]
ratio = [2, 4, 3]                  # Panel ratios: [parent, current, preview]
sort_by = "alphabetical"           # Sort method: alphabetical, natural, modified, created, size, extension
sort_sensitive = false             # Case-sensitive sorting
sort_reverse = false               # Reverse sorting order
sort_dir_first = true              # Show directories first
sort_translit = false              # Transliterate non-ASCII characters
linemode = "none"                  # Line mode: none, size, permissions, mtime, owner
show_hidden = true                 # Show hidden files
show_symlink = true                # Show symlinks
scrolloff = 5                      # Lines to keep above/below cursor
mouse_events = ["click", "scroll"] # Enabled mouse events
title_format = "Yazi: {cwd}"       # Terminal title format

# =====================================
# PREVIEW CONFIGURATION
# =====================================
[preview]
wrap = "no"                    # Text wrapping: no, wrap
tab_size = 2                   # Tab size for preview
max_width = 1200               # Maximum preview width
max_height = 1000              # Maximum preview height
cache_dir = ""                 # Cache directory (empty = default)
image_delay = 30               # Image loading delay (ms)
image_filter = "triangle"      # Image scaling filter
image_quality = 75             # Image quality (1-100)
ueberzug_scale = 1             # Ueberzug scale
ueberzug_offset = [0, 0, 0, 0] # Ueberzug offset [x, y, width, height]

# =====================================
# FILE OPENERS
# =====================================
[opener]
# Text editor
edit = [
  { run = '${EDITOR} "$@"', desc = "$EDITOR", block = true, for = "unix" },
  { run = 'code %*', orphan = true, desc = "code", for = "windows" },
  { run = 'code -w %*', block = true, desc = "code (block)", for = "windows" },
]

# Helix editor
helix = [{ run = 'hx "$@"', desc = "Helix", block = true, for = "unix" }]

# System default opener
open = [
  { run = 'xdg-open "$1"', desc = "Open", for = "linux" },
  { run = 'open "$@"', desc = "Open", for = "macos" },
  { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]

# Reveal in file manager
reveal = [
  { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal", for = "linux" },
  { run = 'open -R "$1"', desc = "Reveal", for = "macos" },
  { run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
  { run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]

# Archive extraction
extract = [
  { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
  { run = 'ya pub extract --list %*', desc = "Extract here", for = "windows" },
]

# Media player
play = [
  { run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
  { run = 'mpv --force-window %*', orphan = true, for = "windows" },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

# =====================================
# FILE OPENING RULES
# =====================================
[open]
rules = [
  # Folders
  { name = "*/", use = [
    "edit",
    "open",
    "reveal",
  ] },

  # Text files
  { mime = "text/*", use = [
    "edit",
    "reveal",
  ] },

  # Images
  { mime = "image/*", use = [
    "open",
    "reveal",
  ] },

  # Audio/Video
  { mime = "{audio,video}/*", use = [
    "play",
    "reveal",
  ] },

  # Archives
  { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [
    "extract",
    "reveal",
  ] },

  # JSON files
  { mime = "application/{json,ndjson}", use = [
    "edit",
    "reveal",
  ] },

  # JavaScript
  { mime = "*/javascript", use = [
    "edit",
    "reveal",
  ] },

  # Empty files
  { mime = "inode/empty", use = [
    "edit",
    "reveal",
  ] },

  # Fallback
  { name = "*", use = [
    "open",
    "reveal",
  ] },
]

# =====================================
# TASK MANAGEMENT
# =====================================
[tasks]
micro_workers = 10       # Number of micro workers
macro_workers = 10       # Number of macro workers
bizarre_retry = 3        # Retry attempts for bizarre tasks
image_alloc = 536870912  # Image allocation (512MB)
image_bound = [0, 0]     # Image bounds
suppress_preload = false # Suppress preloading

# =====================================
# PLUGIN CONFIGURATION
# =====================================
[plugin]
# File type detection
fetchers = [
  { id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]

# File spotters (icon detection)
spotters = [
  { name = "*/", run = "folder" },
  { mime = "text/*", run = "code" },
  { mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },
  { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
  { mime = "image/*", run = "image" },
  { mime = "video/*", run = "video" },
  { name = "*", run = "file" },
]

# Preloaders (background loading)
preloaders = [
  { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
  { mime = "image/*", run = "image" },
  { mime = "video/*", run = "video" },
  { mime = "application/pdf", run = "pdf" },
  { mime = "font/*", run = "font" },
  { mime = "application/ms-opentype", run = "font" },
]

# PIPER INTEGRATION - High priority previewers
prepend_previewers = [
  # Markdown files with glow
  { name = "*.md", run = 'piper -- CLICOLOR_FORCE=1 glow -w=$w -s=dark "$1"' },

  # CSV files with bat (syntax highlighting)
  { name = "*.csv", run = 'piper -- bat -p --color=always "$1"' },

  # Tarballs with tar listing
  { name = "*.tar*", run = 'piper --format=url -- tar tf "$1"' },

  # Log files with bat
  { name = "*.log", run = 'piper -- bat -p --color=always "$1"' },

  # Configuration files with bat
  { name = "*.{conf,config,cfg,ini,toml,yaml,yml}", run = 'piper -- bat -p --color=always "$1"' },

  # Shell scripts with bat
  { name = "*.{sh,bash,zsh,fish}", run = 'piper -- bat -p --color=always "$1"' },

  # Python files with bat
  { name = "*.py", run = 'piper -- bat -p --color=always "$1"' },

  # JSON files with jq for pretty formatting
  { name = "*.json", run = 'piper -- jq . "$1" 2>/dev/null || bat -p --color=always "$1"' },

  # XML files with bat
  { name = "*.xml", run = 'piper -- bat -p --color=always "$1"' },

  # Dockerfile with bat
  { name = "Dockerfile*", run = 'piper -- bat -p --color=always "$1"' },

  # Git files
  { name = ".git*", run = 'piper -- bat -p --color=always "$1"' },
]

# Default previewers (fallback)
previewers = [
  # Folders
  { name = "*/", run = "folder", sync = true },

  # Code files
  { mime = "text/*", run = "code" },
  { mime = "*/{xml,javascript,wine-extension-ini}", run = "code" },

  # JSON files
  { mime = "application/{json,ndjson}", run = "json" },

  # Images
  { mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
  { mime = "image/*", run = "image" },

  # Videos
  { mime = "video/*", run = "video" },

  # PDFs
  { mime = "application/pdf", run = "pdf" },

  # Archives
  { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
  { mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
  { name = "*.{AppImage,appimage}", run = "archive" },

  # Virtual disks
  { mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
  { mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
  { name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },

  # Fonts
  { mime = "font/*", run = "font" },
  { mime = "application/ms-opentype", run = "font" },

  # Empty files
  { mime = "inode/empty", run = "empty" },

  # Fallback
  { name = "*", run = "file" },
]

# PIPER INTEGRATION - Fallback with hexyl
append_previewers = [
  # Use hexyl as fallback for binary files
  { name = "*", run = 'piper -- hexyl --border=none --terminal-width=$w "$1"' },
]

# =====================================
# INPUT CONFIGURATION
# =====================================
[input]
cursor_blink = false # Cursor blinking

# Change directory dialog
cd_title = "Change directory:"
cd_origin = "top-center"
cd_offset = [0, 2, 50, 3]

# Create file/folder dialog
create_title = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [0, 2, 50, 3]

# Rename dialog
rename_title = "Rename:"
rename_origin = "hovered"
rename_offset = [0, 1, 50, 3]

# Filter dialog
filter_title = "Filter:"
filter_origin = "top-center"
filter_offset = [0, 2, 50, 3]

# Find dialog
find_title = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [0, 2, 50, 3]

# Search dialog
search_title = "Search via {n}:"
search_origin = "top-center"
search_offset = [0, 2, 50, 3]

# Shell command dialog
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [0, 2, 50, 3]

# =====================================
# CONFIRMATION DIALOGS
# =====================================
[confirm]
# Trash confirmation
trash_title = "Trash {n} selected file{s}?"
trash_origin = "center"
trash_offset = [0, 0, 70, 20]

# Delete confirmation
delete_title = "Permanently delete {n} selected file{s}?"
delete_origin = "center"
delete_offset = [0, 0, 70, 20]

# Overwrite confirmation
overwrite_title = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin = "center"
overwrite_offset = [0, 0, 50, 15]

# Quit confirmation
quit_title = "Quit?"
quit_content = "The following task is still running, are you sure you want to quit?"
quit_origin = "center"
quit_offset = [0, 0, 50, 15]

# =====================================
# FILE PICKER
# =====================================
[pick]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

# =====================================
# HELP DISPLAY
# =====================================
[which]
sort_by = "none"       # Help sorting: none, key, desc
sort_sensitive = false # Case-sensitive help sorting
sort_reverse = false   # Reverse help sorting
sort_translit = false  # Transliterate help text
